module Sudoku {
    export class fixedGenerator extends baseGenerator {
        constructor() {
            super();
        }
        genrate(board: board, level: gameLevel): boolean {
            var succeed = false;
            var game: string;
            var cellValue: number;
            var levelStr = gameLevel[level];
            if (this[levelStr] != null && this[levelStr].length > 0) {
                var randomIndex = Math.floor(Math.random() * this[levelStr].length);
                game = this[levelStr][randomIndex];
                //TODO make some shuffle 
                if (game.length == 81) {
                    for (var r = 0; r < 9; r++) {
                        for (var c = 0; c < 9; c++) {
                            cellValue = parseInt(game.charAt((r * 9) + c));
                            if (this.IsNumeric(cellValue) && cellValue >=0) {
                                board.setSystemCell(r, c, cellValue);
                            }
                            else
                                return false;

                        }
                    }
                    succeed = true;
                }
            }
            super.genrate(board, level);
            return succeed;
        }
        private IsNumeric(strChar) {  //  check for valid numeric strings
            var strValidChars = "0123456789";
            var blnResult = true;
            if (strChar.length === 0) {
                return false;
            }
            if (strValidChars.indexOf(strChar) == -1) {
                blnResult = false;
            }
            return blnResult;
        }
        //private shuffle(matrix) {
        //    // create the root sudoku solution. this produces the following
        //    // sudoku:
        //    //
        //    // 1 2 3 | 4 5 6 | 7 8 9
        //    // 4 5 6 | 7 8 9 | 1 2 3
        //    // 7 8 9 | 1 2 3 | 4 5 6
        //    // ---------------------
        //    // 2 3 4 | 5 6 7 | 8 9 1
        //    // 5 6 7 | 8 9 1 | 2 3 4
        //    // 8 9 1 | 2 3 4 | 5 6 7
        //    // ---------------------
        //    // 3 4 5 | 6 7 8 | 9 1 2
        //    // 6 7 8 | 9 1 2 | 3 4 5
        //    // 9 1 2 | 3 4 5 | 6 7 8
        //    for (var i = 0; i < 9; i++)
        //        for (var j = 0; j < 9; j++)
        //            matrix[i * 9 + j] = (i * 3 + Math.floor(i / 3) + j) % 9 + 1;

        //    // randomly shuffle the numbers in the root sudoku. pick two
        //    // numbers n1 and n2 at random. scan the board and for each
        //    // occurence of n1, replace it with n2 and vice-versa. repeat
        //    // several times. we pick 42 to make Douglas Adams happy.
        //    for (var i = 0; i < 42; i++) {
        //        var n1 = Math.ceil(Math.random() * 9);
        //        var n2;
        //        do {
        //            n2 = Math.ceil(Math.random() * 9);
        //        }
        //        while (n1 == n2);

        //        for (var row = 0; row < 9; row++) {
        //            for (var col = 0; col < col; k++) {
        //                if (matrix[row * 9 + col] == n1)
        //                    matrix[row * 9 + col] = n2;
        //                else if (matrix[row * 9 + col] == n2)
        //                    matrix[row * 9 + col] = n1;
        //            }
        //        }
        //    }

        //    // randomly swap corresponding columns from each column of
        //    // subsquares
        //    //
        //    //   |       |       |
        //    //   |       |       |
        //    //   V       V       V
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    //----------------------
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    //----------------------
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    //
        //    // note that we cannot swap corresponding rows from each row of
        //    // subsquares.
        //    for (var c = 0; c < 42; c++) {
        //        var s1 = Math.floor(Math.random() * 3);
        //        var s2 = Math.floor(Math.random() * 3);

        //        for (var row = 0; row < 9; row++) {
        //            var tmp = matrix[row * 9 + (s1 * 3 + c % 3)];
        //            matrix[row * 9 + (s1 * 3 + c % 3)] = matrix[row * 9 + (s2 * 3 + c % 3)];
        //            matrix[row * 9 + (s2 * 3 + c % 3)] = tmp;
        //        }
        //    }

        //    // randomly swap columns within each column of subsquares
        //    //
        //    //         | | |
        //    //         | | |
        //    //         V V V
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    //----------------------
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    //----------------------
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    for (var s = 0; s < 42; s++) {
        //        var c1 = Math.floor(Math.random() * 3);
        //        var c2 = Math.floor(Math.random() * 3);

        //        for (var row = 0; row < 9; row++) {
        //            var tmp = matrix[row * 9 + (s % 3 * 3 + c1)];
        //            matrix[row * 9 + (s % 3 * 3 + c1)] = matrix[row * 9 + (s % 3 * 3 + c2)];
        //            matrix[row * 9 + (s % 3 * 3 + c2)] = tmp;
        //        }
        //    }

        //    // randomly swap rows within each row of subsquares
        //    //
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    //----------------------
        //    // . . . | . . . | . . . <---
        //    // . . . | . . . | . . . <---
        //    // . . . | . . . | . . . <---
        //    //----------------------
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    // . . . | . . . | . . .
        //    for (var s = 0; s < 42; s++) {
        //        var r1 = Math.floor(Math.random() * 3);
        //        var r2 = Math.floor(Math.random() * 3);

        //        for (var col = 0; col < 9; col++) {
        //            var tmp = matrix[(s % 3 * 3 + r1) * 9 + col];
        //            matrix[(s % 3 * 3 + r1) * 9 + col] = matrix[(s % 3 * 3 + r2) * 9 + col];
        //            matrix[(s % 3 * 3 + r2) * 9 + col] = tmp;
        //        }
        //    }

        //    // we could also randomly swap rows and columns of subsquares
        //    //
        //    //   |       |       |
        //    //   |       |       |
        //    // /---\   /---\   /---\
        //    // . . . | . . . | . . .  \
        //    // . . . | . . . | . . .  | <---
        //    // . . . | . . . | . . .  /
        //    //----------------------
        //    // . . . | . . . | . . .  \
        //    // . . . | . . . | . . .  | <---
        //    // . . . | . . . | . . .  /
        //    //----------------------
        //    // . . . | . . . | . . .  \
        //    // . . . | . . . | . . .  | <---
        //    // . . . | . . . | . . .  /
        //    //
        //    // we could also rotate the board 90, 180 or 270 degrees and
        //    // mirror left to right and/or top to bottom.
        //}
        private MEDIUM = [];
        private HARD = [];
        private EXTREME = [];
        private EASY = [
            "000105000140000670080002400063070010900000003010090520007200080026000035000409000", // Easiest
            "000004028406000005100030600000301000087000140000709000002010003900000507670400000", // Gentle
            "400010000000309040070005009000060021004070600190050000900400070030608000000030006", // Moderate */
            "309000400200709000087000000750060230600904008028050041000000590000106007006000104", // Tough
            "000704005020010070000080002090006250600070008053200010400090000030060090200407000", // Diabolical
            "000041000060000200000000000320600000000050041700000000000200300048000000501000000", // Easy 17 Clue
            "002090300805000000100000000090060040000000058000000001070000200300500000000100000", // Hard 17 Clue
            "000000000001900500560310090100600028004000700270004003040068035002005900000000000", // Naked Triples
            "300000000970010000600583000200000900500621003008000005000435002000090056000000001", // Hidden Triple
            "000921003009000060000000500080403006007000800500700040003000000020000700800195000", // Intersection Removeal
            "093004560060003140004608309981345000347286951652070483406002890000400010029800034", // x-wing example # .....456..6...3.....46..3.998..4.....472.695.....7..834.6..28.....4...1..298.....
            "123000587005817239987000164051008473390750618708100925076000891530081746810070352", // Simple Colouring Rule 2
            "036210840800045631014863009287030456693584000145672398408396000350028064060450083", // Simple Colouring Rule 4
            "004630500605401003370059640938060154457198362216345987043506019060903405509014036", // Simple Colouring Rule 5
            "645010893738459621219638745597060184481975000326841579902080010803190000164020908", // y-wing example
            "050030602642895317037020800023504700406000520571962483214000900760109234300240170", // SwordFish
            "008003102002810306314260980923648700476351298185900634047030820209080500801700460", // X-Cycle (weak link)  #.....3..2..2.1.3...1..6..8.9.3..87....6...2....59..6.4.4..3..2...9.8.5..8..7.....
            "804537000023614085605982034000105870500708306080203450200859003050371208008426507", // X-Cycle (strong link)  #...6..4.1.5...4.2....721..524..9...8.........3...7..469..345....7.9...3.4.5..7...
            "506094003000086925892513647738629050154378296629451738987145362000960000000830009", // XY-Chain #5............86....9.51.64.7....9.5...43.82...2.4....8.87.45.6....96............9
            "093824560085600002206075008321769845000258300578040296850016723007082650002507180", // 3D Medusa Rule 1 #.938.45....56.....2.6.7.....2..6..4....2.8....7..4..9.....1.7.3.....26....25.718.
            "300052000250300010004607523093200805570000030408035060005408300030506084840023056", // 3D Medusa Rule 2 #3...5....25.3...1...46.75...9.2..8.5.7.....3.4.8..5.6...54.83...3...6.84....2...6
            "290000830000020970000109402845761293600000547009045008903407000060030709050000384", // 3D Medusa Rule 3 #29.....3.....2..7....1.94.28..76.2..6.......7..9.45..89.34.7....6..3.....5.....84
            "023401967006702100170690020749120006001960700000047091030076010007014800010209670", // 3D Medusa Rule 4 #7...9......2.15.....523.8.98......14..3...9..46......35.4.691.....18.3......7...6
            "587412693206037800100008200002001748050724900714800500005240109001085400420170305", // 3D Medusa Rule 5 #5.7.1..9...6.3.8..1....82....2..17.8...724...7.48..5....52....9..1.8.4...2..7.3.5
            "923407015876050924500200030769020140432000059185004260098042071207030486000708092", // 3D Medusa Rule 6 #9..4.7...876.5...4...2...3..6....1..43.....59..5....6..9...2...2...3.486...7.8..2
            "986721345304956007007030960073065009690017003100390276000679030069143700731582694", // 3D Medusa Rule 7 #986.2.3....4956.............73..5..96...1...31..3..27.............1437....1.8.694
            "024090008800402900719000240075804300240900587038507604082000059007209003490050000", // Jelly-Fish		# ....9...88..4.29..71.....4...58.43..2.......7..85.76...8.....59..72.9..34...5....
            "760005804530400060849006050307060205256710003904050607423600570695007000178500026", // UR type 1  # .6...58.4...4......49..6.5.3.7...2..2...1...3..4...6.7.2.6..57......7...1.85...2.
            "100480003070156492400370186729564318504031009010290045007040901040913067901020004", // UR type 2  # 1...8...3.7.1.6.9.....7....72..64.1.5.......9.1.29..45....4.....4.9.3.6.9...2...4
            "100390004029000300000502800016000570900000006042000080000139000695000731231756008", // UR type 2b # 1..39...4.29...3.....5.2....1....57.9.......6.42....8....1.9.....5...73.2...56..8
            "592178346063245089840936050006852904904617508085394600059481060400063890608029400", // UR type 4  # ..2.7.3...6........4.936.5....852...9.......8...394....5.481.6........9...8.2.4..
            "200008001194762835000010042470000020009200100020000059658927010913654287742183596", // UR type 4b # 2....8..1.9.76........1..4247.....2...9...1...2.....5965..2........54.8.7..1....6
            "617304800485010307923857641359040078164078530278030064592761483841003706736480010", // HUR type 1  # .....48..........79.38..6.1....4..78.64.7.53.27..3....5.2..14.38..........64.....
            "400052008708300002900080040596127384187030256004568719840000005000003801000895400", // HUR type 2  # ....52...7.83.....9......4...612.3....7...2....4.687...4......5.....38.1...89....
            "004302985080100006000800041900600500036950070057008693590000007000509060602700859", // HUR type 2b # ..4..29.5.8.1............419..6..5...3..5..7...7..8..359............9.6.6.27..8..
            "092001750500200008000030200075004960200060075069700030008090020700003089903800040", // XYZ-Wing # .9...17..5..2....8....3.2...7...496.2...6...5.697...3...8.9....7....3..9..38...4.
            "400052008708300002900080040596127384187030256004568719840000005000003801000895400", // APE		# ....52...7.83.....9......4...612.3....7...2....4.687...4......5.....38.1...89....
            "620050030000920150015004000003000600180000075062000300001249700296785413040060592", // GXC	(weak link)	# 62..5..3....92.1....5..4.....3...6..18.....75..2...3.....2..7....6.85....4..6..92
            "000602400002403600000080021070000840309040207045000030500060000003159780008204500", // ER  # ...6.24....24.36......8...1.7....84.3.9...2.7.45....3.5...6......31.97....82.4...
            "010600000000103207400950006745869000829000465100524978600090004201406000004000680", // FXW  # .1..........1.32.74...5...67.58......29...46......49.86...9...42.14.6..........8.
            "080000070001800009270961005100082700007413500008790003300248007800000200742000060", // FSF  # .8.....7...1.....92..961..51...82.....74.35.....79...33..248..78.....2...4.....6.
            "900008503080020097006000004300406002060080359800203001700860205650070018008500006", // FSF Sashimi  # 9....8....8..2..97..6.....43..4.6..2.6..8..5.8..2.3..17.....2..65..7..1....5....6
            "005907600090000080000830490010580000009000300000096010452018000030000040007400200", // AIC (Weak)	# ..5..76...9.....8....83.49..1.58......9...3......96.1..52.18....3.....4...74..2..
            "215800060400625000006300000950080040002947000040530092000053406524768931060400058", // AIC (Strong) # 21.....6.4..625.....63.....95..8..4....9.7....4..3..92.....34.....768..1.6.....58
            "520800367709630050600725009006080700800056003002070600100542906090068500065007040", // AIC (off chain) # .2....3....963..5.6..7.5..9..6.8.7..8.......3..2.7.6..1..5.2..6.9..685....5....4.
            "006019500907068043080000000804190000000645800000802904000006420540001607002984300", // Dual CFC  # ..6.195..9.7....43.8.......8.41........6.5........29.4.......2.54....6.7..298.3..
            "150432069904186005003070004002000040000090002030020500000000400346750008810240056", // Sue-De-Coq # 010908002006047010500000000007060030600000005040090200000000004090510700300204050
            "092400018846312597100900002000601004610040080704809000200003006001064820460000070", // Triple CFC # .9.....1..463..5..1..9....2...6.1..4.1..4..8.7..8.9...2....3..6..1..482..6.....7.
            "002006500400000023000002406978060312613729845245010679800900200320600054004200008", // NOT IN APP Triple CFC + ALS.....65..4......23.....2..6978.6.3..6.3...8.5..5.1.6798..9.....32......4..42.....
            "300000709019070005076090030090086301108000600600410050080060203700030086963000007", // Triple UFC 3.....7.9.1..7...5..6.9..3..9..86..1..8...6..6..41..5..8..6.2..7...3..8.9.3.....7
            "060000509002400600905000070009010086000206905056080700090000162008007493604000857", // ALS
            "900875001000109000001302009190023058208057103530081060400706800000204000700518004", // DB # 9...75..1.....9.....13....9.9..2..5.2.8...1.3.3..8..6.4....68.....2.....7..51...4
            "008907050070040010060501007630000900009000800007400035700603020040070060006104700", // QFC # 008907000070040010060501000630000900009000800007000035000603020040070060000104700
            "000000605000300090080004001040020970000000000031080060900600020010007000504000000", // Riddle of Sho
            "100007090030020008009600500005300900010080002600004000300000010041000007007000300", // ESCARGOT
            "800000000003600000070090200050007000000045700000100030001000068008500010090000400"]; // Arto Inkala


    }

} 